
To predict stock prices using LSTM (Long Short-Term Memory) networks, we can use a Jupyter Notebook to build and train an LSTM model. Hereâ€™s a step-by-step guide to doing this using Python, TensorFlow, and Keras.

Step-by-Step Implementation
Step 1: Import Libraries
First, we need to import the necessary libraries.

python
Copy code
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
import yfinance as yf
Step 2: Load the Stock Data
We'll use the yfinance library to download the stock data. Let's take Apple's stock price as an example.

python
Copy code
# Download the stock data
df = yf.download('AAPL', start='2010-01-01', end='2023-01-01')
df.head()
Step 3: Data Preprocessing
We need to scale the data and create sequences for the LSTM model.

python
Copy code
# Sort the data by date
df = df.sort_index(ascending=True)

# Create a new dataframe with only the 'Close' column
data = df[['Close']]

# Convert the dataframe to a numpy array
dataset = data.values

# Define the length of the training data (80% of the data)
training_data_len = int(np.ceil(0.8 * len(dataset)))

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

# Create the training data
train_data = scaled_data[0:int(training_data_len), :]

# Split the data into x_train and y_train datasets
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

# Convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data to be accepted by the LSTM model
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
Step 4: Build the LSTM Model
We'll use Keras to build the LSTM model.

python
Copy code
# Build the LSTM model
model = Sequential()

# Add the first LSTM layer
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))

# Add the second LSTM layer
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))

# Add the output layer
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)
Step 5: Create the Testing Dataset
Prepare the data for testing.

python
Copy code
# Create the testing data
test_data = scaled_data[training_data_len - 60:, :]

# Create the x_test and y_test datasets
x_test = []
y_test = dataset[training_data_len:, :]

for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

# Convert the data to a numpy array
x_test = np.array(x_test)

# Reshape the data to be accepted by the LSTM model
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
Step 6: Make Predictions
Use the model to make predictions.

python
Copy code
# Get the model's predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

# Visualize the data
plt.figure(figsize=(16, 8))
plt.title('LSTM Model')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()
Step 7: Evaluate the Model
Evaluate the model's performance using root mean squared error (RMSE).

python
Copy code
from sklearn.metrics import mean_squared_error

rmse = np.sqrt(mean_squared_error(y_test, predictions))
print(f'RMSE: {rmse}')
Full Jupyter Notebook Code
python
Copy code
# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
import yfinance as yf
from sklearn.metrics import mean_squared_error

# Load the stock data
df = yf.download('AAPL', start='2010-01-01', end='2023-01-01')

# Sort the data by date
df = df.sort_index(ascending=True)

# Create a new dataframe with only the 'Close' column
data = df[['Close']]

# Convert the dataframe to a numpy array
dataset = data.values

# Define the length of the training data (80% of the data)
training_data_len = int(np.ceil(0.8 * len(dataset)))

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(dataset)

# Create the training data
train_data = scaled_data[0:int(training_data_len), :]

# Split the data into x_train and y_train datasets
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

# Convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data to be accepted by the LSTM model
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Build the LSTM model
model = Sequential()

# Add the first LSTM layer
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))

# Add the second LSTM layer
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))

# Add the output layer
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Create the testing data
test_data = scaled_data[training_data_len - 60:, :]

# Create the x_test and y_test datasets
x_test = []
y_test = dataset[training_data_len:, :]

for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

# Convert the data to a numpy array
x_test = np.array(x_test)

# Reshape the data to be accepted by the LSTM model
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Get the model's predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

# Visualize the data
plt.figure(figsize=(16, 8))
plt.title('LSTM Model')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

# Evaluate the model
rmse = np.sqrt(mean_squared_error(y_test, predictions))
print(f'RMSE: {rmse}')
This code provides a comprehensive approach to predicting stock prices using LSTM. You can modify the stock symbol and the date range as needed to analyze different companies.






